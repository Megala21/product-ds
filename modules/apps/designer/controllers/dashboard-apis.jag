<%
var user;
var dashboard;
var page;
var urlPrefix;
var tenantPrefix;

(function () {
    var log = new Log();

    var configs = require('/configs/designer.json');
    tenantPrefix = configs.tenantPrefix + '/{domain}';

    var utils = require('/modules/utils.js');
    var path = request.getRequestURI();
    urlPrefix = utils.relativePrefix(path);

    var usr = require('/modules/user.js');
    user = usr.current();

    var buildOptions = function (vars) {
        if (user) {
            user.secured = true;
            return user;
        }
        return {
            domain: vars.domain
        };
    };

    response.contentType = 'application/json';

    var vars;
    var permissions;
    var carbon = require('carbon');
    var anonRole = carbon.user.anonRole;
    var editor = request.getParameter('editor');
    var method = request.getMethod();
    var dashboards = require('/modules/dashboards.js');
    var matcher = new URIMatcher(request.getRequestURI());
    if (matcher.match('/{context}/apis/dashboards/{id}') ||
            matcher.match('/{context}' + tenantPrefix + '/apis/dashboards/{id}')) {
        vars = matcher.elements();
        if (method === 'GET') {
            utils.sandbox(buildOptions(vars), function () {
                dashboard = dashboards.findOne(vars.id);
            });
            if (!dashboard) {
                response.sendError(404, JSON.stringify({
                    error: true
                }));
                return;
            }
            permissions = dashboard.permissions;
            if (!user) {
                if (permissions.viewers.indexOf(anonRole) === -1) {
                    response.sendError(401, JSON.stringify({
                        error: 'unauthorized to access the dashboard'
                    }));
                    return;
                }
                print(dashboard);
                return;
            }
            if (!utils.allowed(user.roles, permissions.editors) && !utils.allowed(user.roles, permissions.viewers)) {
                response.sendError(401, {
                    error: 'unauthorized to access the dashboard'
                });
                return;
            }
            print(dashboard);
            return;
        }
        if (method === 'PUT') {
            //TODO
        }
        response.sendError(405, JSON.stringify({
            error: true
        }));
        return;
    } else if (matcher.match('/{context}/apis/dashboards') ||
            matcher.match('/{context}' + tenantPrefix + '/apis/dashboards')) {
        if (method === 'POST') {
            if (!user || !utils.allowed(user.roles, configs.designers)) {
                response.sendError(401, JSON.stringify({
                    error: 'unauthorized to access the dashboard'
                }));
                return;
            }
            dashboard = request.getContent();
            vars = matcher.elements();
            //TODO: fix one user overriding another user's dashboard
            utils.sandbox(buildOptions(vars), function () {
                dashboards.create(dashboard);
            });
            print({
                error: false
            });
            return;
        }
        response.sendError(405, JSON.stringify({
            error: true
        }));
        return;
    }
    response.sendError(404, JSON.stringify({
        error: true
    }));
}());
%>